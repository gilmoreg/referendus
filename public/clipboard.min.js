(function (f, c) { typeof module !== 'undefined' ? module.exports = c() : typeof define === 'function' && typeof define.amd === 'object' ? define(c) : this[f] = c(); }('clipboard', function () {
  if (typeof document === 'undefined' || !document.addEventListener) return null; const f = {}; f.copy = (function () {
    function c() { d = !1; b = null; e && window.getSelection().removeAllRanges(); e = !1; } var d = !1,
      b = null,
      e = !1; document.addEventListener('copy', (c) => { if (d) { for (const e in b)c.clipboardData.setData(e, b[e]); c.preventDefault(); } }); return function (g) {
        return new Promise((k,
f) => { d = !0; b = typeof g === 'string' ? { 'text/plain': g } : g instanceof Node ? { 'text/html': (new XMLSerializer()).serializeToString(g) } : g; try { const n = document.getSelection(); if (!document.queryCommandEnabled('copy') && n.isCollapsed) { const l = document.createRange(); l.selectNodeContents(document.body); n.addRange(l); e = !0; } if (document.execCommand('copy'))c(), k(); else throw Error("Unable to copy. Perhaps it's not available in your browser?"); } catch (p) { c(), f(p); } });
      };
  }()); f.paste = (function () {
    let c = !1,
      d,
      b; document.addEventListener('paste',
(e) => { if (c) { c = !1; e.preventDefault(); const g = d; d = null; g(e.clipboardData.getData(b)); } }); return function (e) { return new Promise((g, f) => { c = !0; d = g; b = e || 'text/plain'; try { document.execCommand('paste') || (c = !1, f(Error('Unable to paste. Pasting only works in Internet Explorer at the moment.'))); } catch (m) { c = !1, f(Error(m)); } }); };
  }()); typeof ClipboardEvent === 'undefined' && typeof window.clipboardData !== 'undefined' && typeof window.clipboardData.setData !== 'undefined' && ((function (c) {
    function d(a, b) {
      return function () {
        a.apply(b,
arguments);
      };
    } function b(a) { if (typeof this !== 'object') throw new TypeError('Promises must be constructed via new'); if (typeof a !== 'function') throw new TypeError('not a function'); this._value = this._state = null; this._deferreds = []; l(a, d(f, this), d(k, this)); } function e(a) { const b = this; return this._state === null ? void this._deferreds.push(a) : void p(() => { const c = b._state ? a.onFulfilled : a.onRejected; if (c === null) return void (b._state ? a.resolve : a.reject)(b._value); let h; try { h = c(b._value); } catch (d) { return void a.reject(d); }a.resolve(h); }); }
    function f(a) { try { if (a === this) throw new TypeError('A promise cannot be resolved with itself.'); if (a && (typeof a === 'object' || typeof a === 'function')) { const b = a.then; if (typeof b === 'function') return void l(d(b, a), d(f, this), d(k, this)); } this._state = !0; this._value = a; m.call(this); } catch (c) { k.call(this, c); } } function k(a) { this._state = !1; this._value = a; m.call(this); } function m() { for (let a = 0, b = this._deferreds.length; b > a; a++)e.call(this, this._deferreds[a]); this._deferreds = null; } function n(a, b, c, h) {
      this.onFulfilled = typeof a ===
'function' ? a : null; this.onRejected = typeof b === 'function' ? b : null; this.resolve = c; this.reject = h;
    } function l(a, b, c) { let h = !1; try { a((a) => { h || (h = !0, b(a)); }, (a) => { h || (h = !0, c(a)); }); } catch (d) { h || (h = !0, c(d)); } } var p = b.immediateFn || typeof setImmediate === 'function' && setImmediate || function (a) { setTimeout(a, 1); },
      q = Array.isArray || function (a) { return Object.prototype.toString.call(a) === '[object Array]'; }; b.prototype.catch = function (a) { return this.then(null, a); }; b.prototype.then = function (a, c) {
        const d = this; return new b((b,
f) => { e.call(d, new n(a, c, b, f)); });
      }; b.all = function () { const a = Array.prototype.slice.call(arguments.length === 1 && q(arguments[0]) ? arguments[0] : arguments); return new b((b, c) => { function d(e, g) { try { if (g && (typeof g === 'object' || typeof g === 'function')) { const k = g.then; if (typeof k === 'function') return void k.call(g, (a) => { d(e, a); }, c); }a[e] = g; --f === 0 && b(a); } catch (l) { c(l); } } if (a.length === 0) return b([]); for (var f = a.length, e = 0; e < a.length; e++)d(e, a[e]); }); }; b.resolve = function (a) {
       return a && typeof a === 'object' && a.constructor ===
b ? a : new b((b) => { b(a); });
     }; b.reject = function (a) { return new b((b, c) => { c(a); }); }; b.race = function (a) { return new b((b, c) => { for (let d = 0, e = a.length; e > d; d++)a[d].then(b, c); }); }; typeof module !== 'undefined' && module.exports ? module.exports = b : c.Promise || (c.Promise = b);
  }(this)), f.copy = function (c) { return new Promise((d, b) => { if (typeof c !== 'string' && !('text/plain' in c)) throw Error('You must provide a text/plain type.'); window.clipboardData.setData('Text', typeof c === 'string' ? c : c['text/plain']) ? d() : b(Error('Copying was rejected.')); }); },
f.paste = function () { return new Promise((c, d) => { const b = window.clipboardData.getData('Text'); b ? c(b) : d(Error('Pasting was rejected.')); }); }); return f;
}));
